
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parsers.statpy;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.stream.Collectors;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\011\000\002\002\004\000\002\012" +
    "\004\000\002\012\003\000\002\013\004\000\002\013\004" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\004\000\002\013\003\000\002\013\004\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\044\012" +
    "\000\002\034\011\000\002\043\010\000\002\043\007\000" +
    "\002\035\011\000\002\037\004\000\002\037\003\000\002" +
    "\041\007\000\002\041\007\000\002\041\007\000\002\041" +
    "\012\000\002\041\012\000\002\036\011\000\002\040\004" +
    "\000\002\040\003\000\002\042\007\000\002\042\012\000" +
    "\002\042\012\000\002\033\005\000\002\033\003\000\002" +
    "\014\003\000\002\014\003\000\002\016\006\000\002\016" +
    "\004\000\002\015\005\000\002\017\006\000\002\027\013" +
    "\000\002\027\012\000\002\027\012\000\002\027\011\000" +
    "\002\032\004\000\002\032\003\000\002\031\012\000\002" +
    "\030\006\000\002\020\023\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\021\011\000\002\022\012\000" +
    "\002\023\012\000\002\024\004\000\002\024\003\000\002" +
    "\025\006\000\002\026\005\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\005\000\002\003\003\000\002\003\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\005\000\002\004" +
    "\005\000\002\005\004\000\002\005\004\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\004\044\005\001\002\000\004\002\u0108\001" +
    "\002\000\004\045\006\001\002\000\004\004\007\001\002" +
    "\000\004\005\010\001\002\000\004\046\011\001\002\000" +
    "\036\020\027\021\041\022\046\023\014\024\037\033\023" +
    "\043\034\044\044\050\042\052\016\053\026\054\021\060" +
    "\032\061\022\001\002\000\004\012\uffda\001\002\000\044" +
    "\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\033\ufff9\043" +
    "\ufff9\044\ufff9\047\ufff9\050\ufff9\052\ufff9\053\ufff9\054\ufff9" +
    "\055\ufff9\056\ufff9\060\ufff9\061\ufff9\001\002\000\004\033" +
    "\uffbc\001\002\000\004\033\u0105\001\002\000\004\004\377" +
    "\001\002\000\004\012\376\001\002\000\044\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\033\ufff5\043\ufff5\044\ufff5" +
    "\047\ufff5\050\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056" +
    "\ufff5\060\ufff5\061\ufff5\001\002\000\004\004\356\001\002" +
    "\000\004\004\330\001\002\000\004\032\326\001\002\000" +
    "\044\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\033\ufff3" +
    "\043\ufff3\044\ufff3\047\ufff3\050\ufff3\052\ufff3\053\ufff3\054" +
    "\ufff3\055\ufff3\056\ufff3\060\ufff3\061\ufff3\001\002\000\004" +
    "\012\325\001\002\000\004\046\316\001\002\000\004\033" +
    "\uffbd\001\002\000\044\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\033\ufff7\043\ufff7\044\ufff7\047\ufff7\050\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\060\ufff7\061\ufff7" +
    "\001\002\000\040\020\027\021\041\022\046\023\014\024" +
    "\037\033\023\043\034\044\044\047\315\050\042\052\016" +
    "\053\026\054\021\060\032\061\022\001\002\000\004\012" +
    "\314\001\002\000\004\012\uffdb\001\002\000\004\004\244" +
    "\001\002\000\004\012\243\001\002\000\044\020\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\024\ufffb\033\ufffb\043\ufffb\044\ufffb" +
    "\047\ufffb\050\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056" +
    "\ufffb\060\ufffb\061\ufffb\001\002\000\004\033\uffba\001\002" +
    "\000\044\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\033" +
    "\ufffa\043\ufffa\044\ufffa\047\ufffa\050\ufffa\052\ufffa\053\ufffa" +
    "\054\ufffa\055\ufffa\056\ufffa\060\ufffa\061\ufffa\001\002\000" +
    "\004\033\uffbf\001\002\000\004\004\214\001\002\000\044" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\033\ufff4\043" +
    "\ufff4\044\ufff4\047\ufff4\050\ufff4\052\ufff4\053\ufff4\054\ufff4" +
    "\055\ufff4\056\ufff4\060\ufff4\061\ufff4\001\002\000\012\033" +
    "\uffbb\071\047\072\051\073\050\001\002\000\044\020\ufffe" +
    "\021\ufffe\022\ufffe\023\ufffe\024\ufffe\033\ufffe\043\ufffe\044" +
    "\ufffe\047\ufffe\050\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe" +
    "\056\ufffe\060\ufffe\061\ufffe\001\002\000\004\033\uffbe\001" +
    "\002\000\004\004\174\001\002\000\004\004\141\001\002" +
    "\000\004\004\052\001\002\000\004\005\053\001\002\000" +
    "\004\046\054\001\002\000\006\020\060\022\057\001\002" +
    "\000\010\020\uffe9\022\uffe9\047\uffe9\001\002\000\010\020" +
    "\060\022\057\047\140\001\002\000\004\063\130\001\002" +
    "\000\012\063\064\066\061\067\063\070\062\001\002\000" +
    "\004\032\125\001\002\000\004\032\122\001\002\000\004" +
    "\032\117\001\002\000\004\064\065\001\002\000\004\032" +
    "\066\001\002\000\004\046\067\001\002\000\022\014\074" +
    "\015\103\016\071\017\100\025\073\026\076\033\077\074" +
    "\072\001\002\000\010\012\ufff0\013\ufff0\047\ufff0\001\002" +
    "\000\044\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012" +
    "\uffa1\013\uffa1\027\uffa1\030\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\037\uffa1\040\uffa1\041\uffa1\047\uffa1\057\uffa1\001\002\000" +
    "\004\046\110\001\002\000\044\005\uffa0\006\uffa0\007\uffa0" +
    "\010\uffa0\011\uffa0\012\uffa0\013\uffa0\027\uffa0\030\uffa0\034" +
    "\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\047\uffa0" +
    "\057\uffa0\001\002\000\044\005\uffa4\006\uffa4\007\uffa4\010" +
    "\uffa4\011\uffa4\012\uffa4\013\uffa4\027\uffa4\030\uffa4\034\uffa4" +
    "\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\047\uffa4\057" +
    "\uffa4\001\002\000\006\013\uffdc\047\uffdc\001\002\000\044" +
    "\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013" +
    "\uff9f\027\uff9f\030\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\047\uff9f\057\uff9f\001\002\000\010\012" +
    "\ufff1\013\ufff1\047\ufff1\001\002\000\044\005\uffa2\006\uffa2" +
    "\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\027\uffa2\030" +
    "\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2" +
    "\047\uffa2\057\uffa2\001\002\000\006\013\104\047\105\001" +
    "\002\000\010\012\ufff2\013\ufff2\047\ufff2\001\002\000\044" +
    "\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\027\uffa3\030\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\047\uffa3\057\uffa3\001\002\000\022\014" +
    "\074\015\103\016\071\017\100\025\073\026\076\033\077" +
    "\074\072\001\002\000\004\012\106\001\002\000\010\020" +
    "\uffe5\022\uffe5\047\uffe5\001\002\000\006\013\uffdd\047\uffdd" +
    "\001\002\000\004\075\111\001\002\000\004\013\112\001" +
    "\002\000\004\014\113\001\002\000\004\013\114\001\002" +
    "\000\004\014\115\001\002\000\004\047\116\001\002\000" +
    "\010\012\uffef\013\uffef\047\uffef\001\002\000\022\014\074" +
    "\015\103\016\071\017\100\025\073\026\076\033\077\074" +
    "\072\001\002\000\004\012\121\001\002\000\010\020\uffe7" +
    "\022\uffe7\047\uffe7\001\002\000\022\014\074\015\103\016" +
    "\071\017\100\025\073\026\076\033\077\074\072\001\002" +
    "\000\004\012\124\001\002\000\010\020\uffe6\022\uffe6\047" +
    "\uffe6\001\002\000\022\014\074\015\103\016\071\017\100" +
    "\025\073\026\076\033\077\074\072\001\002\000\004\012" +
    "\127\001\002\000\010\020\uffe8\022\uffe8\047\uffe8\001\002" +
    "\000\004\065\131\001\002\000\004\032\132\001\002\000" +
    "\004\046\133\001\002\000\022\014\074\015\103\016\071" +
    "\017\100\025\073\026\076\033\077\074\072\001\002\000" +
    "\006\013\104\047\135\001\002\000\004\012\136\001\002" +
    "\000\010\020\uffe4\022\uffe4\047\uffe4\001\002\000\010\020" +
    "\uffea\022\uffea\047\uffea\001\002\000\044\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\033\uffeb\043\uffeb\044\uffeb\047" +
    "\uffeb\050\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\060\uffeb\061\uffeb\001\002\000\004\005\142\001\002\000" +
    "\004\046\143\001\002\000\006\020\145\022\146\001\002" +
    "\000\010\020\uffe1\022\uffe1\047\uffe1\001\002\000\006\063" +
    "\162\066\161\001\002\000\004\063\152\001\002\000\010" +
    "\020\145\022\146\047\151\001\002\000\010\020\uffe2\022" +
    "\uffe2\047\uffe2\001\002\000\044\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\033\uffe3\043\uffe3\044\uffe3\047\uffe3\050" +
    "\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\060\uffe3" +
    "\061\uffe3\001\002\000\004\065\153\001\002\000\004\032" +
    "\154\001\002\000\004\046\155\001\002\000\022\014\074" +
    "\015\103\016\071\017\100\025\073\026\076\033\077\074" +
    "\072\001\002\000\006\013\104\047\157\001\002\000\004" +
    "\012\160\001\002\000\010\020\uffde\022\uffde\047\uffde\001" +
    "\002\000\004\032\171\001\002\000\004\064\163\001\002" +
    "\000\004\032\164\001\002\000\004\046\165\001\002\000" +
    "\022\014\074\015\103\016\071\017\100\025\073\026\076" +
    "\033\077\074\072\001\002\000\006\013\104\047\167\001" +
    "\002\000\004\012\170\001\002\000\010\020\uffdf\022\uffdf" +
    "\047\uffdf\001\002\000\022\014\074\015\103\016\071\017" +
    "\100\025\073\026\076\033\077\074\072\001\002\000\004" +
    "\012\173\001\002\000\010\020\uffe0\022\uffe0\047\uffe0\001" +
    "\002\000\004\005\175\001\002\000\004\046\176\001\002" +
    "\000\016\020\027\021\041\022\046\023\014\024\037\044" +
    "\201\001\002\000\004\033\210\001\002\000\020\020\027" +
    "\021\041\022\046\023\014\024\037\044\201\047\203\001" +
    "\002\000\004\033\uffbb\001\002\000\004\033\204\001\002" +
    "\000\044\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\033" +
    "\uffee\043\uffee\044\uffee\047\uffee\050\uffee\052\uffee\053\uffee" +
    "\054\uffee\055\uffee\056\uffee\060\uffee\061\uffee\001\002\000" +
    "\004\032\205\001\002\000\022\014\074\015\103\016\071" +
    "\017\100\025\073\026\076\033\077\074\072\001\002\000" +
    "\004\012\207\001\002\000\020\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\024\uffed\044\uffed\047\uffed\001\002\000\004\032" +
    "\211\001\002\000\022\014\074\015\103\016\071\017\100" +
    "\025\073\026\076\033\077\074\072\001\002\000\004\012" +
    "\213\001\002\000\020\020\uffec\021\uffec\022\uffec\023\uffec" +
    "\024\uffec\044\uffec\047\uffec\001\002\000\016\020\027\021" +
    "\041\022\046\023\014\024\037\044\201\001\002\000\004" +
    "\033\216\001\002\000\004\032\217\001\002\000\016\014" +
    "\074\015\103\016\071\017\100\025\073\026\076\001\002" +
    "\000\004\012\221\001\002\000\004\033\222\001\002\000" +
    "\016\034\224\035\227\036\225\037\231\040\226\041\223" +
    "\001\002\000\016\014\uffc7\015\uffc7\016\uffc7\017\uffc7\025" +
    "\uffc7\026\uffc7\001\002\000\016\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\025\uffc9\026\uffc9\001\002\000\016\014\uffca\015" +
    "\uffca\016\uffca\017\uffca\025\uffca\026\uffca\001\002\000\016" +
    "\014\uffc8\015\uffc8\016\uffc8\017\uffc8\025\uffc8\026\uffc8\001" +
    "\002\000\016\014\uffcc\015\uffcc\016\uffcc\017\uffcc\025\uffcc" +
    "\026\uffcc\001\002\000\016\014\074\015\103\016\071\017" +
    "\100\025\073\026\076\001\002\000\016\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\025\uffcb\026\uffcb\001\002\000\004\012" +
    "\233\001\002\000\004\033\234\001\002\000\004\051\235" +
    "\001\002\000\004\005\236\001\002\000\004\046\237\001" +
    "\002\000\036\020\027\021\041\022\046\023\014\024\037" +
    "\033\023\043\034\044\044\050\042\052\016\053\026\054" +
    "\021\060\032\061\022\001\002\000\040\020\027\021\041" +
    "\022\046\023\014\024\037\033\023\043\034\044\044\047" +
    "\241\050\042\052\016\053\026\054\021\060\032\061\022" +
    "\001\002\000\044\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\033\uffcd\043\uffcd\044\uffcd\047\uffcd\050\uffcd\052\uffcd" +
    "\053\uffcd\054\uffcd\055\uffcd\056\uffcd\060\uffcd\061\uffcd\001" +
    "\002\000\044\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff" +
    "\033\uffff\043\uffff\044\uffff\047\uffff\050\uffff\052\uffff\053" +
    "\uffff\054\uffff\055\uffff\056\uffff\060\uffff\061\uffff\001\002" +
    "\000\044\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\033" +
    "\ufffc\043\ufffc\044\ufffc\047\ufffc\050\ufffc\052\ufffc\053\ufffc" +
    "\054\ufffc\055\ufffc\056\ufffc\060\ufffc\061\ufffc\001\002\000" +
    "\026\004\255\007\247\014\074\015\103\016\071\017\100" +
    "\025\073\026\076\031\252\033\250\001\002\000\036\005" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\027\uffb9" +
    "\030\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\001\002\000\036\005\uffb4\006\uffb4\007\uffb4\010\uffb4" +
    "\011\uffb4\012\uffb4\027\uffb4\030\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\001\002\000\026\004\255" +
    "\007\247\014\074\015\103\016\071\017\100\025\073\026" +
    "\076\031\252\033\250\001\002\000\036\005\uffb5\006\uffb5" +
    "\007\uffb5\010\uffb5\011\uffb5\012\uffb5\027\uffb5\030\uffb5\034" +
    "\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\001\002" +
    "\000\036\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012" +
    "\uffb3\027\uffb3\030\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\001\002\000\026\004\255\007\247\014" +
    "\074\015\103\016\071\017\100\025\073\026\076\031\252" +
    "\033\250\001\002\000\034\005\311\006\263\007\264\010" +
    "\266\011\273\027\260\030\274\034\261\035\270\036\272" +
    "\037\265\040\262\041\267\001\002\000\036\005\uffb8\006" +
    "\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\027\uffb8\030\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\001" +
    "\002\000\026\004\255\007\247\014\074\015\103\016\071" +
    "\017\100\025\073\026\076\031\252\033\250\001\002\000" +
    "\036\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\027\uffb6\030\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040" +
    "\uffb6\041\uffb6\001\002\000\034\005\271\006\263\007\264" +
    "\010\266\011\273\027\260\030\274\034\261\035\270\036" +
    "\272\037\265\040\262\041\267\001\002\000\026\004\255" +
    "\007\247\014\074\015\103\016\071\017\100\025\073\026" +
    "\076\031\252\033\250\001\002\000\026\004\255\007\247" +
    "\014\074\015\103\016\071\017\100\025\073\026\076\031" +
    "\252\033\250\001\002\000\026\004\255\007\247\014\074" +
    "\015\103\016\071\017\100\025\073\026\076\031\252\033" +
    "\250\001\002\000\026\004\255\007\247\014\074\015\103" +
    "\016\071\017\100\025\073\026\076\031\252\033\250\001" +
    "\002\000\026\004\255\007\247\014\074\015\103\016\071" +
    "\017\100\025\073\026\076\031\252\033\250\001\002\000" +
    "\026\004\255\007\247\014\074\015\103\016\071\017\100" +
    "\025\073\026\076\031\252\033\250\001\002\000\026\004" +
    "\255\007\247\014\074\015\103\016\071\017\100\025\073" +
    "\026\076\031\252\033\250\001\002\000\026\004\255\007" +
    "\247\014\074\015\103\016\071\017\100\025\073\026\076" +
    "\031\252\033\250\001\002\000\026\004\255\007\247\014" +
    "\074\015\103\016\071\017\100\025\073\026\076\031\252" +
    "\033\250\001\002\000\036\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\027\uffb7\030\uffb7\034\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\041\uffb7\001\002\000\026\004" +
    "\255\007\247\014\074\015\103\016\071\017\100\025\073" +
    "\026\076\031\252\033\250\001\002\000\026\004\255\007" +
    "\247\014\074\015\103\016\071\017\100\025\073\026\076" +
    "\031\252\033\250\001\002\000\026\004\255\007\247\014" +
    "\074\015\103\016\071\017\100\025\073\026\076\031\252" +
    "\033\250\001\002\000\036\005\uffb1\006\263\007\264\010" +
    "\266\011\273\012\uffb1\027\uffb1\030\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\001\002\000\036\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\027\uffac" +
    "\030\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\001\002\000\036\005\uffa8\006\263\007\264\010\266" +
    "\011\273\012\uffa8\027\260\030\274\034\uffa8\035\uffa8\036" +
    "\uffa8\037\uffa8\040\uffa8\041\uffa8\001\002\000\036\005\uffa9" +
    "\006\263\007\264\010\266\011\273\012\uffa9\027\260\030" +
    "\274\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\001\002\000\036\005\uffa5\006\263\007\264\010\266\011" +
    "\273\012\uffa5\027\260\030\274\034\uffa5\035\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\001\002\000\036\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\027\uffab\030\uffab" +
    "\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\001" +
    "\002\000\036\005\uffa7\006\263\007\264\010\266\011\273" +
    "\012\uffa7\027\260\030\274\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\001\002\000\036\005\uffad\006\uffad" +
    "\007\uffad\010\266\011\273\012\uffad\027\uffad\030\uffad\034" +
    "\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\001\002" +
    "\000\036\005\uffae\006\uffae\007\uffae\010\266\011\273\012" +
    "\uffae\027\uffae\030\uffae\034\uffae\035\uffae\036\uffae\037\uffae" +
    "\040\uffae\041\uffae\001\002\000\036\005\uffa6\006\263\007" +
    "\264\010\266\011\273\012\uffa6\027\260\030\274\034\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\001\002\000" +
    "\036\005\uffaa\006\263\007\264\010\266\011\273\012\uffaa" +
    "\027\260\030\274\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\001\002\000\036\005\uffb2\006\263\007\264" +
    "\010\266\011\273\012\uffb2\027\uffb2\030\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\001\002\000\004" +
    "\012\uffd6\001\002\000\036\005\uffb0\006\263\007\264\010" +
    "\266\011\273\012\uffb0\027\uffb0\030\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\001\002\000\036\005" +
    "\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\027\uffaf" +
    "\030\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\001\002\000\044\020\ufff6\021\ufff6\022\ufff6\023\ufff6" +
    "\024\ufff6\033\ufff6\043\ufff6\044\ufff6\047\ufff6\050\ufff6\052" +
    "\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\060\ufff6\061\ufff6" +
    "\001\002\000\004\002\001\001\002\000\036\020\027\021" +
    "\041\022\046\023\014\024\037\033\023\043\034\044\044" +
    "\050\042\052\016\053\026\054\021\060\032\061\022\001" +
    "\002\000\040\020\027\021\041\022\046\023\014\024\037" +
    "\033\023\043\034\044\044\047\320\050\042\052\016\053" +
    "\026\054\021\060\032\061\022\001\002\000\004\052\321" +
    "\001\002\000\004\004\322\001\002\000\026\004\255\007" +
    "\247\014\074\015\103\016\071\017\100\025\073\026\076" +
    "\031\252\033\250\001\002\000\034\005\324\006\263\007" +
    "\264\010\266\011\273\027\260\030\274\034\261\035\270" +
    "\036\272\037\265\040\262\041\267\001\002\000\004\012" +
    "\uffc5\001\002\000\044\020\ufffd\021\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\033\ufffd\043\ufffd\044\ufffd\047\ufffd\050\ufffd\052" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\060\ufffd\061\ufffd" +
    "\001\002\000\026\004\255\007\247\014\074\015\103\016" +
    "\071\017\100\025\073\026\076\031\252\033\250\001\002" +
    "\000\034\006\263\007\264\010\266\011\273\012\uffd7\027" +
    "\260\030\274\034\261\035\270\036\272\037\265\040\262" +
    "\041\267\001\002\000\026\004\255\007\247\014\074\015" +
    "\103\016\071\017\100\025\073\026\076\031\252\033\250" +
    "\001\002\000\034\005\332\006\263\007\264\010\266\011" +
    "\273\027\260\030\274\034\261\035\270\036\272\037\265" +
    "\040\262\041\267\001\002\000\004\046\333\001\002\000" +
    "\036\020\027\021\041\022\046\023\014\024\037\033\023" +
    "\043\034\044\044\050\042\052\016\053\026\054\021\060" +
    "\032\061\022\001\002\000\040\020\027\021\041\022\046" +
    "\023\014\024\037\033\023\043\034\044\044\047\335\050" +
    "\042\052\016\053\026\054\021\060\032\061\022\001\002" +
    "\000\046\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\033" +
    "\uffd2\043\uffd2\044\uffd2\047\uffd2\050\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\060\uffd2\061\uffd2\062\340\001" +
    "\002\000\044\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\033\uffd3\043\uffd3\044\uffd3\047\uffd3\050\uffd3\052\uffd3\053" +
    "\uffd3\054\uffd3\055\uffd3\056\uffd3\060\uffd3\061\uffd3\001\002" +
    "\000\046\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\033" +
    "\uffd4\043\uffd4\044\uffd4\047\uffd4\050\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\055\uffd4\056\uffd4\060\uffd4\061\uffd4\062\340\001" +
    "\002\000\006\046\343\061\342\001\002\000\046\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\033\uffd0\043\uffd0\044" +
    "\uffd0\047\uffd0\050\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0" +
    "\056\uffd0\060\uffd0\061\uffd0\062\uffd0\001\002\000\004\004" +
    "\346\001\002\000\036\020\027\021\041\022\046\023\014" +
    "\024\037\033\023\043\034\044\044\050\042\052\016\053" +
    "\026\054\021\060\032\061\022\001\002\000\040\020\027" +
    "\021\041\022\046\023\014\024\037\033\023\043\034\044" +
    "\044\047\345\050\042\052\016\053\026\054\021\060\032" +
    "\061\022\001\002\000\044\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\033\uffce\043\uffce\044\uffce\047\uffce\050\uffce" +
    "\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\060\uffce\061" +
    "\uffce\001\002\000\026\004\255\007\247\014\074\015\103" +
    "\016\071\017\100\025\073\026\076\031\252\033\250\001" +
    "\002\000\034\005\350\006\263\007\264\010\266\011\273" +
    "\027\260\030\274\034\261\035\270\036\272\037\265\040" +
    "\262\041\267\001\002\000\004\046\351\001\002\000\036" +
    "\020\027\021\041\022\046\023\014\024\037\033\023\043" +
    "\034\044\044\050\042\052\016\053\026\054\021\060\032" +
    "\061\022\001\002\000\040\020\027\021\041\022\046\023" +
    "\014\024\037\033\023\043\034\044\044\047\353\050\042" +
    "\052\016\053\026\054\021\060\032\061\022\001\002\000" +
    "\046\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\033\uffcf" +
    "\043\uffcf\044\uffcf\047\uffcf\050\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\060\uffcf\061\uffcf\062\uffcf\001\002" +
    "\000\044\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\033" +
    "\uffd5\043\uffd5\044\uffd5\047\uffd5\050\uffd5\052\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\056\uffd5\060\uffd5\061\uffd5\001\002\000" +
    "\046\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\033\uffd1" +
    "\043\uffd1\044\uffd1\047\uffd1\050\uffd1\052\uffd1\053\uffd1\054" +
    "\uffd1\055\uffd1\056\uffd1\060\uffd1\061\uffd1\062\uffd1\001\002" +
    "\000\026\004\255\007\247\014\074\015\103\016\071\017" +
    "\100\025\073\026\076\031\252\033\250\001\002\000\034" +
    "\005\360\006\263\007\264\010\266\011\273\027\260\030" +
    "\274\034\261\035\270\036\272\037\265\040\262\041\267" +
    "\001\002\000\004\046\361\001\002\000\004\055\364\001" +
    "\002\000\006\055\uffc2\056\uffc2\001\002\000\006\055\364" +
    "\056\370\001\002\000\016\014\074\015\103\016\071\017" +
    "\100\025\073\026\076\001\002\000\004\057\366\001\002" +
    "\000\036\020\027\021\041\022\046\023\014\024\037\033" +
    "\023\043\034\044\044\050\042\052\016\053\026\054\021" +
    "\060\032\061\022\001\002\000\042\020\027\021\041\022" +
    "\046\023\014\024\037\033\023\043\034\044\044\050\042" +
    "\052\016\053\026\054\021\055\uffc1\056\uffc1\060\032\061" +
    "\022\001\002\000\004\057\374\001\002\000\004\047\373" +
    "\001\002\000\006\055\uffc3\056\uffc3\001\002\000\044\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\033\uffc4\043\uffc4" +
    "\044\uffc4\047\uffc4\050\uffc4\052\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\056\uffc4\060\uffc4\061\uffc4\001\002\000\036\020\027" +
    "\021\041\022\046\023\014\024\037\033\023\043\034\044" +
    "\044\050\042\052\016\053\026\054\021\060\032\061\022" +
    "\001\002\000\040\020\027\021\041\022\046\023\014\024" +
    "\037\033\023\043\034\044\044\047\uffc0\050\042\052\016" +
    "\053\026\054\021\060\032\061\022\001\002\000\044\020" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\033\ufff8\043\ufff8" +
    "\044\ufff8\047\ufff8\050\ufff8\052\ufff8\053\ufff8\054\ufff8\055" +
    "\ufff8\056\ufff8\060\ufff8\061\ufff8\001\002\000\026\004\255" +
    "\007\247\014\074\015\103\016\071\017\100\025\073\026" +
    "\076\031\252\033\250\001\002\000\034\005\u0101\006\263" +
    "\007\264\010\266\011\273\027\260\030\274\034\261\035" +
    "\270\036\272\037\265\040\262\041\267\001\002\000\004" +
    "\046\u0102\001\002\000\036\020\027\021\041\022\046\023" +
    "\014\024\037\033\023\043\034\044\044\050\042\052\016" +
    "\053\026\054\021\060\032\061\022\001\002\000\040\020" +
    "\027\021\041\022\046\023\014\024\037\033\023\043\034" +
    "\044\044\047\u0104\050\042\052\016\053\026\054\021\060" +
    "\032\061\022\001\002\000\044\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\033\uffc6\043\uffc6\044\uffc6\047\uffc6\050" +
    "\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\060\uffc6" +
    "\061\uffc6\001\002\000\006\012\uffd8\032\u0106\001\002\000" +
    "\026\004\255\007\247\014\074\015\103\016\071\017\100" +
    "\025\073\026\076\031\252\033\250\001\002\000\034\006" +
    "\263\007\264\010\266\011\273\012\uffd9\027\260\030\274" +
    "\034\261\035\270\036\272\037\265\040\262\041\267\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\006\014\012\030\013\044\014\024\015" +
    "\011\016\032\017\034\020\037\021\012\022\016\023\027" +
    "\027\035\034\017\035\042\036\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\006\014\013\241\014\024" +
    "\015\011\016\032\017\034\020\037\021\012\022\016\023" +
    "\027\027\035\034\017\035\042\036\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\037\055\041\054\001\001" +
    "\000\002\001\001\000\004\041\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\101\033\100\044\067\045\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\101\044\067\045\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\101" +
    "\044\067\045\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\101\044\067\045\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\101\044\067\045" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\101\033\133\044\067\045\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\146\042\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\101\033\155\044\067" +
    "\045\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\101\033\165\044" +
    "\067\045\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\101\044\067\045\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\176\043\177\001\001\000" +
    "\002\001\001\000\004\006\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\101\044\067\045\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\101\044" +
    "\067\045\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\006\014\012\237\013" +
    "\044\014\024\015\011\016\032\017\034\020\037\021\012" +
    "\022\016\023\027\027\035\034\017\035\042\036\023\001" +
    "\001\000\036\006\014\013\241\014\024\015\011\016\032" +
    "\017\034\020\037\021\012\022\016\023\027\027\035\034" +
    "\017\035\042\036\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\252\004\244\005" +
    "\253\007\255\010\245\011\250\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\312\004\244\005\253\007" +
    "\255\010\245\011\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\311\004\244\005\253\007\255\010" +
    "\245\011\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\256\004\244\005\253\007\255\010\245\011" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\307\004\244\005\253\007\255\010\245\011\250\001" +
    "\001\000\016\003\306\004\244\005\253\007\255\010\245" +
    "\011\250\001\001\000\016\003\305\004\244\005\253\007" +
    "\255\010\245\011\250\001\001\000\016\003\304\004\244" +
    "\005\253\007\255\010\245\011\250\001\001\000\016\003" +
    "\303\004\244\005\253\007\255\010\245\011\250\001\001" +
    "\000\016\003\302\004\244\005\253\007\255\010\245\011" +
    "\250\001\001\000\016\003\301\004\244\005\253\007\255" +
    "\010\245\011\250\001\001\000\016\003\300\004\244\005" +
    "\253\007\255\010\245\011\250\001\001\000\016\003\277" +
    "\004\244\005\253\007\255\010\245\011\250\001\001\000" +
    "\002\001\001\000\016\003\276\004\244\005\253\007\255" +
    "\010\245\011\250\001\001\000\016\003\275\004\244\005" +
    "\253\007\255\010\245\011\250\001\001\000\016\003\274" +
    "\004\244\005\253\007\255\010\245\011\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\006\014\012\316\013\044\014\024\015" +
    "\011\016\032\017\034\020\037\021\012\022\016\023\027" +
    "\027\035\034\017\035\042\036\023\001\001\000\036\006" +
    "\014\013\241\014\024\015\011\016\032\017\034\020\037" +
    "\021\012\022\016\023\027\027\035\034\017\035\042\036" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\322\004\244\005\253\007\255\010\245\011\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\326\004\244\005\253\007\255\010\245\011" +
    "\250\001\001\000\002\001\001\000\016\003\330\004\244" +
    "\005\253\007\255\010\245\011\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\006\014\012\333\013\044" +
    "\014\024\015\011\016\032\017\034\020\037\021\012\022" +
    "\016\023\027\027\035\034\017\035\042\036\023\001\001" +
    "\000\036\006\014\013\241\014\024\015\011\016\032\017" +
    "\034\020\037\021\012\022\016\023\027\027\035\034\017" +
    "\035\042\036\023\001\001\000\010\030\335\031\340\032" +
    "\336\001\001\000\002\001\001\000\006\030\353\031\354" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\006\014\012\343\013\044\014\024\015\011" +
    "\016\032\017\034\020\037\021\012\022\016\023\027\027" +
    "\035\034\017\035\042\036\023\001\001\000\036\006\014" +
    "\013\241\014\024\015\011\016\032\017\034\020\037\021" +
    "\012\022\016\023\027\027\035\034\017\035\042\036\023" +
    "\001\001\000\002\001\001\000\016\003\346\004\244\005" +
    "\253\007\255\010\245\011\250\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\006\014\012\351\013\044\014" +
    "\024\015\011\016\032\017\034\020\037\021\012\022\016" +
    "\023\027\027\035\034\017\035\042\036\023\001\001\000" +
    "\036\006\014\013\241\014\024\015\011\016\032\017\034" +
    "\020\037\021\012\022\016\023\027\027\035\034\017\035" +
    "\042\036\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\356\004\244\005\253\007" +
    "\255\010\245\011\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\362\025\361\001\001\000\002\001" +
    "\001\000\006\025\371\026\370\001\001\000\004\007\364" +
    "\001\001\000\002\001\001\000\040\006\014\012\366\013" +
    "\044\014\024\015\011\016\032\017\034\020\037\021\012" +
    "\022\016\023\027\027\035\034\017\035\042\036\023\001" +
    "\001\000\036\006\014\013\241\014\024\015\011\016\032" +
    "\017\034\020\037\021\012\022\016\023\027\027\035\034" +
    "\017\035\042\036\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\006" +
    "\014\012\374\013\044\014\024\015\011\016\032\017\034" +
    "\020\037\021\012\022\016\023\027\027\035\034\017\035" +
    "\042\036\023\001\001\000\036\006\014\013\241\014\024" +
    "\015\011\016\032\017\034\020\037\021\012\022\016\023" +
    "\027\027\035\034\017\035\042\036\023\001\001\000\002" +
    "\001\001\000\016\003\377\004\244\005\253\007\255\010" +
    "\245\011\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\006\014\012\u0102\013\044\014\024\015\011\016" +
    "\032\017\034\020\037\021\012\022\016\023\027\027\035" +
    "\034\017\035\042\036\023\001\001\000\036\006\014\013" +
    "\241\014\024\015\011\016\032\017\034\020\037\021\012" +
    "\022\016\023\027\027\035\034\017\035\042\036\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\u0106" +
    "\004\244\005\253\007\255\010\245\011\250\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        main.ParserState.output.add("Error Sintáctico en la Línea " + (s.left) +
                " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    }

    public void unrecovered_syntax_error(Symbol s){ 
        main.ParserState.output.add("Error síntactico irrecuperable en la Línea " + 
                (s.left)+ " Columna "+s.right+". Componente " + s.value + 
                " no reconocido."); 
    }

    String title;
    String titleX;
    String titleY;
    Object[] valueArray;
    Object[] titleArray;
    HashMap<String, String> symbol_table = new HashMap<>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // document ::= VOID MAIN LPAREN RPAREN LBRACKET stmts RBRACKET 
            {
              LinkedList RESULT =null;
		int list1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> list1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        LinkedList<String> translation = new LinkedList<>();
        translation.add("def main():");
        translation.addAll(list1.stream().map(item -> "\t" + item).collect(Collectors.toCollection(LinkedList::new)));
        translation.add("if __name__ == '__main__':");
        translation.add("\tmain()");
        translation.forEach(stmt -> main.ParserState.output.add(stmt));
        main.ParserState.output.add("--Parseo finalizado--");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("document",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= document EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList start_val = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmts ::= stmts stmt 
            {
              LinkedList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> list = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> stmt = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(stmt != null) list.addAll(stmt);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmts ::= stmt 
            {
              LinkedList<String> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> stmt = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new LinkedList<String>();
        if(stmt != null) RESULT.addAll(stmt);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= variable_stmt SEMICOLON 
            {
              LinkedList<String> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> stmt = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = stmt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= print_stmt SEMICOLON 
            {
              LinkedList<String> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> stmt = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = stmt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= if_stmt 
            {
              LinkedList<String> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> stmt = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= for_stmt 
            {
              LinkedList<String> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> stmt = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= while_stmt 
            {
              LinkedList<String> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> stmt = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= do_while_stmt SEMICOLON 
            {
              LinkedList<String> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> stmt = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = stmt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= switch_stmt 
            {
              LinkedList<String> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> stmt = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= BREAK SEMICOLON 
            {
              LinkedList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new LinkedList<String>();
        RESULT.add(v);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= define_global_vars 
            {
              LinkedList<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= bar_graph 
            {
              LinkedList<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= pie_graph 
            {
              LinkedList<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // translation_exp ::= expr_literal 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("translation_exp",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // translation_exp ::= ID 
            {
              String RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        try{
            RESULT = symbol_table.get(key.toLowerCase());
        }
        catch(Exception e){
            main.ParserState.output.add("Error en ("+keyleft+", "+keyright+"): "+key.toLowerCase()+" no existe");
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("translation_exp",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // translation_exp ::= json_value 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("translation_exp",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // json_value ::= DOLLAR LBRACKET NEW_VALOR COMMA STRING_LITERAL COMMA STRING_LITERAL RBRACKET 
            {
              String RESULT =null;
		int fileleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        try{
            RESULT = (String) main.ParserState.json_files.get(file.toLowerCase()).get(key.toLowerCase());
        }
        catch(Exception e){
            main.ParserState.output.add("Error en ("+keyleft+", "+keyright+"): "+key.toLowerCase()+" no existe");
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("json_value",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // define_global_vars ::= VOID DEFINIR_GLOBALES LPAREN RPAREN LBRACKET global_vars RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("define_global_vars",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // global_vars ::= global_vars type ID ASSIGN translation_exp SEMICOLON 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 symbol_table.put(k.toLowerCase(), v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_vars",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // global_vars ::= type ID ASSIGN translation_exp SEMICOLON 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 symbol_table.put(k.toLowerCase(), v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_vars",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bar_graph ::= VOID GRAFICA_BARRAS LPAREN RPAREN LBRACKET bar_graph_body RBRACKET 
            {
              Object RESULT =null;
		 graph.general.barras(title, titleX, titleY, valueArray, titleArray); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bar_graph",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bar_graph_body ::= bar_graph_body bar_graph_options 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bar_graph_body",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bar_graph_body ::= bar_graph_options 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bar_graph_body",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bar_graph_options ::= STRING TITULO ASSIGN translation_exp SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 title = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bar_graph_options",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bar_graph_options ::= STRING TITULOX ASSIGN translation_exp SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 titleX = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bar_graph_options",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bar_graph_options ::= STRING TITULOY ASSIGN translation_exp SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 titleY = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bar_graph_options",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bar_graph_options ::= STRING SQR_BRACKETS EJEX ASSIGN LBRACKET list_items RBRACKET SEMICOLON 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<String> arr = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        titleArray = arr.toArray();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bar_graph_options",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bar_graph_options ::= DOUBLE SQR_BRACKETS VALORES ASSIGN LBRACKET list_items RBRACKET SEMICOLON 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<String> arr = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        valueArray = arr.toArray();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bar_graph_options",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // pie_graph ::= VOID GRAFICA_PIE LPAREN RPAREN LBRACKET pie_graph_body RBRACKET 
            {
              Object RESULT =null;
		 graph.general.pie(title, valueArray, titleArray); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie_graph",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // pie_graph_body ::= pie_graph_body pie_graph_options 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie_graph_body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // pie_graph_body ::= pie_graph_options 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie_graph_body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // pie_graph_options ::= STRING TITULO ASSIGN translation_exp SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 title = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie_graph_options",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // pie_graph_options ::= STRING SQR_BRACKETS EJEX ASSIGN LBRACKET list_items RBRACKET SEMICOLON 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<String> arr = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        titleArray = arr.toArray();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie_graph_options",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // pie_graph_options ::= DOUBLE SQR_BRACKETS VALORES ASSIGN LBRACKET list_items RBRACKET SEMICOLON 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<String> arr = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        valueArray = arr.toArray();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie_graph_options",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // list_items ::= list_items COMMA translation_exp 
            {
              LinkedList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<String> list = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String item = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.add(item);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_items",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // list_items ::= translation_exp 
            {
              LinkedList<String> RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String item = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        LinkedList list = new LinkedList();
        list.add(item);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_items",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable_stmt ::= var_declaration 
            {
              LinkedList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> v = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variable_stmt ::= var_assignment 
            {
              LinkedList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> v = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_declaration ::= type ID ASSIGN expr 
            {
              LinkedList<String> RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new LinkedList<String>();
        RESULT.add(k + " = " + v);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var_declaration ::= type ID 
            {
              LinkedList<String> RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new LinkedList<String>();
        RESULT.add(k + " = None");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // var_assignment ::= ID ASSIGN expr 
            {
              LinkedList<String> RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new LinkedList<String>();
        RESULT.add(k + " = " + v);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_assignment",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // print_stmt ::= PRINT LPAREN expr RPAREN 
            {
              LinkedList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new LinkedList<String>();
        RESULT.add("print("+e+")");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if_stmt ::= IF LPAREN expr RPAREN LBRACKET stmts RBRACKET continue_if else_stmt 
            {
              LinkedList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int list1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<String> list1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> list2 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int list3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> list3 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new LinkedList<String>();
        RESULT.add("if "+e+" :");
        RESULT.addAll(list1.stream().map(item -> "\t" + item).collect(Collectors.toCollection(LinkedList::new)));
        RESULT.addAll(list2.stream().map(item -> "\t" + item).collect(Collectors.toCollection(LinkedList::new)));
        RESULT.addAll(list3.stream().map(item -> "\t" + item).collect(Collectors.toCollection(LinkedList::new)));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // if_stmt ::= IF LPAREN expr RPAREN LBRACKET stmts RBRACKET continue_if 
            {
              LinkedList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int list1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<String> list1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> list2 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new LinkedList<String>();
        RESULT.add("if "+e+" :");
        RESULT.addAll(list1.stream().map(item -> "\t" + item).collect(Collectors.toCollection(LinkedList::new)));
        RESULT.addAll(list2.stream().map(item -> "\t" + item).collect(Collectors.toCollection(LinkedList::new)));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // if_stmt ::= IF LPAREN expr RPAREN LBRACKET stmts RBRACKET else_stmt 
            {
              LinkedList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int list1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<String> list1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> list2 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new LinkedList<String>();
        RESULT.add("if "+e+" :");
        RESULT.addAll(list1.stream().map(item -> "\t" + item).collect(Collectors.toCollection(LinkedList::new)));
        RESULT.addAll(list2.stream().map(item -> "\t" + item).collect(Collectors.toCollection(LinkedList::new)));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // if_stmt ::= IF LPAREN expr RPAREN LBRACKET stmts RBRACKET 
            {
              LinkedList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int list1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> list1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new LinkedList<String>();
        RESULT.add("if "+e+" :");
        RESULT.addAll(list1.stream().map(item -> "\t" + item).collect(Collectors.toCollection(LinkedList::new)));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // continue_if ::= continue_if elif_stmt 
            {
              LinkedList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> list = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> stmt = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.addAll(stmt);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("continue_if",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // continue_if ::= elif_stmt 
            {
              LinkedList<String> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> stmt = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new LinkedList<String>();
        RESULT.addAll(stmt);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("continue_if",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // elif_stmt ::= ELSE IF LPAREN expr RPAREN LBRACKET stmts RBRACKET 
            {
              LinkedList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int list1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> list1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new LinkedList<String>();
        RESULT.add("elif "+e+" :");
        RESULT.addAll(list1.stream().map(item -> "\t" + item).collect(Collectors.toCollection(LinkedList::new)));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // else_stmt ::= ELSE LBRACKET stmts RBRACKET 
            {
              LinkedList<String> RESULT =null;
		int list1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> list1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new LinkedList<String>();
        RESULT.add("else :");
        RESULT.addAll(list1.stream().map(item -> "\t" + item).collect(Collectors.toCollection(LinkedList::new)));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // for_stmt ::= FOR LPAREN type ID ASSIGN expr_literal SEMICOLON ID logical_op expr_literal SEMICOLON ID INC RPAREN LBRACKET stmts RBRACKET 
            {
              LinkedList<String> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int fromleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String from = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String to = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int list1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> list1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new LinkedList<String>();
        RESULT.add("for "+var+" in range("+from+","+to+"):");
        RESULT.addAll(list1.stream().map(item -> "\t" + item).collect(Collectors.toCollection(LinkedList::new)));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logical_op ::= LESS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logical_op ::= LESS_EQUAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // logical_op ::= GREATER_EQUAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // logical_op ::= GREATER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // logical_op ::= EQUAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // logical_op ::= NOT_EQUAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // while_stmt ::= WHILE LPAREN expr RPAREN LBRACKET stmts RBRACKET 
            {
              LinkedList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int list1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> list1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new LinkedList<String>();
        RESULT.add("while "+e+":");
        RESULT.addAll(list1.stream().map(item -> "\t" + item).collect(Collectors.toCollection(LinkedList::new)));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // do_while_stmt ::= DO LBRACKET stmts RBRACKET WHILE LPAREN expr RPAREN 
            {
              LinkedList<String> RESULT =null;
		int list1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<String> list1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new LinkedList<String>();
        RESULT.add("while True:");
        RESULT.addAll(list1.stream().map(item -> "\t" + item).collect(Collectors.toCollection(LinkedList::new)));
        RESULT.add("\tif "+e+":");
        RESULT.add("\t\tbreak");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do_while_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // switch_stmt ::= SWITCH LPAREN expr RPAREN LBRACKET cases default_case RBRACKET 
            {
              LinkedList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int list1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<String> list1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> list2 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new LinkedList<String>();
        RESULT.add("def switch("+e+"):");
        RESULT.add("\tswitcher = {");
        RESULT.addAll(list1.stream().map(item -> "\t\t" + item).collect(Collectors.toCollection(LinkedList::new)));
        RESULT.addAll(list2.stream().map(item -> "\t\t" + item).collect(Collectors.toCollection(LinkedList::new)));
        RESULT.add("\t}");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cases ::= cases case 
            {
              LinkedList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> list = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> stmt = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.addAll(stmt);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cases ::= case 
            {
              LinkedList<String> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> stmt = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new LinkedList<String>();
        RESULT.addAll(stmt);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // case ::= CASE expr_literal COLON stmts 
            {
              LinkedList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int list1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> list1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new LinkedList<String>();
        RESULT.add(e+":");
        RESULT.addAll(list1.stream().map(item -> "\t" + item).collect(Collectors.toCollection(LinkedList::new)));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // default_case ::= DEFAULT COLON stmts 
            {
              LinkedList<String> RESULT =null;
		int list1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> list1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new LinkedList<String>();
        RESULT.add("0:");
        RESULT.addAll(list1.stream().map(item -> "\t" + item).collect(Collectors.toCollection(LinkedList::new)));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_case",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= INTEGER 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= DOUBLE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type ::= STRING 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type ::= CHAR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // type ::= VOID 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // type ::= BOOL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= binary_expr 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= unary_expr 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= LPAREN expr RPAREN 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr_literal 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= ID 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // binary_expr ::= arithmetic_expr 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // binary_expr ::= relational_expr 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // binary_expr ::= expr AND expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "" + e1 + " and " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binary_expr ::= expr OR expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "" + e1 + " or " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // unary_expr ::= NOT expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "not " + e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // unary_expr ::= SUB expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "-" + e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arithmetic_expr ::= expr ADD expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "" + e1 + op + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arithmetic_expr ::= expr SUB expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "" + e1 + op + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // arithmetic_expr ::= expr TIMES expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "" + e1 + op + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // arithmetic_expr ::= expr DIV expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "" + e1 + op + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // relational_expr ::= expr GREATER expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "" + e1 + op + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // relational_expr ::= expr LESS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "" + e1 + op + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // relational_expr ::= expr GREATER_EQUAL expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "" + e1 + op + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // relational_expr ::= expr LESS_EQUAL expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "" + e1 + op + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // relational_expr ::= expr EQUAL expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "" + e1 + op + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // relational_expr ::= expr NOT_EQUAL expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "" + e1 + op + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr_literal ::= STRING_LITERAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_literal",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr_literal ::= INTEGER_LITERAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_literal",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr_literal ::= CHAR_LITERAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_literal",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr_literal ::= DOUBLE_LITERAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_literal",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr_literal ::= TRUE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_literal",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr_literal ::= FALSE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_literal",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
